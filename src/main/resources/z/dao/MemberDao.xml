<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="z.dao.MemberDao">

	<resultMap type="member" id="member-map">
		<id column="mnum" property="memberNo" />
		<result column="email" property="email" />
		<result column="name" property="name" />
		<result column="pwd" property="password" />
		<result column="photo" property="photo" />
		<result column="kakao" property="kakao" />
		<result column="fcbk" property="facebook" />
		<result column="stat" property="meetStat" />
	</resultMap>

	<select id="getListMeetingMembBoss" parameterType="int"
		resultMap="member-map">
		select memb.mnum,
		memb.email,
		memb.name,
		memb.photo,
		link.stat
		from link
		left outer join memb
		on memb.mnum=link.mnum
		where mtnum=#{value} and
		boss="y";
	</select>

	<select id="getListMeetingMembNotBoss" parameterType="int"
		resultMap="member-map">
		select memb.mnum,
		memb.email,
		memb.name,
		memb.photo,
		link.stat
		from link
		left outer
		join memb on memb.mnum=link.mnum
		where mtnum=#{value}
		and boss="n";
	</select>

	<select id="getList" resultMap="member-map">
		select * from memb;
	</select>


	<select id="getOne" parameterType="int" resultMap="member-map">
		select *
		from
		memb
		where mnum=#{value};
	</select>

	<select id="countByNo" parameterType="int" resultType="int">
		select
		count(*)
		from memb
		where mnum=#{value};
	</select>

	<select id="getOneByEmail" parameterType="string" resultMap="member-map">
		select
		mnum,
		name,
		email
		from memb
		where email=#{value}
	</select>

	<select id="getOneByEmailPasswordCount" parameterType="map"
		resultType="int">
		select count(*)
		from memb
		where email=#{email} and
		pwd=password(#{password})
	</select>

	<insert id="insert" parameterType="member" useGeneratedKeys="true"
		keyColumn="mnum" keyProperty="memberNo">
		insert into memb(email, name, pwd, photo,
		kakao, fcbk)
		values(#{email}, #{name}, password(#{password}), #{photo},
		#{kakao}, #{facebook})
	</insert>

	<select id="count" parameterType="string" resultType="int">
		select
		count(*) from memb where email=#{value}
	</select>

	<select id="getOneByEmailPassword" parameterType="map"
		resultMap="member-map">
		select
		mnum,
		name,
		email,
		photo,
		kakao,
		fcbk
		from memb
		where
		email=#{email}
		and pwd=password(#{password})
	</select>

	<select id="getOneByEmailFacebook" parameterType="map"
		resultMap="member-map">
		select
		mnum,
		name,
		email,
		kakao,
		fcbk
		from memb
		where
		email=#{email}
		and fcbk=#{facebook}
	</select>


	<!-- 회원 중복 검사 -->
	<select id="chkMbEmail" resultType="int">
		SELECT
		count(*)
		FROM memb
		WHERE
		email = #{email}
	</select>

	<!-- 페이스북 중복 검사 -->
	<select id="chkMbFacebook" resultType="int">
		SELECT
		count(*)
		FROM memb
		WHERE fcbk = #{facebook}
	</select>

	<update id="update" parameterType="member">
		update memb set
		name=#{name},
		photo=#{photo}
		where mnum=#{memberNo}
	</update>

	<update id="updatelogin" parameterType="member">
		update memb set
		email=#{email},
		pwd=password(#{password})
		where mnum=#{memberNo}
	</update>

	<!-- 회원 삭제 임시 -->
	<delete id="linkmemberdelete" parameterType='int'>
		delete from link
		where mnum=#{value}
	</delete>

	<delete id="memberdelete" parameterType="int">
		delete from memb where
		mnum=#{value}
	</delete>

</mapper>
